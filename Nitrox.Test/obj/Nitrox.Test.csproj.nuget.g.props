<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <RestoreSuccess Condition=" '$(RestoreSuccess)' == '' ">True</RestoreSuccess>
    <RestoreTool Condition=" '$(RestoreTool)' == '' ">NuGet</RestoreTool>
    <ProjectAssetsFile Condition=" '$(ProjectAssetsFile)' == '' ">$(MSBuildThisFileDirectory)project.assets.json</ProjectAssetsFile>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NuGetPackageFolders Condition=" '$(NuGetPackageFolders)' == '' ">C:\Users\sanya\.nuget\packages\;C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages</NuGetPackageFolders>
    <NuGetProjectStyle Condition=" '$(NuGetProjectStyle)' == '' ">PackageReference</NuGetProjectStyle>
    <NuGetToolVersion Condition=" '$(NuGetToolVersion)' == '' ">6.13.2</NuGetToolVersion>
  </PropertyGroup>
  <ItemGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <SourceRoot Include="C:\Users\sanya\.nuget\packages\" />
    <SourceRoot Include="C:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages\" />
  </ItemGroup>
  <ItemGroup Condition=" '$(Language)' == 'C#' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Compile Include="$(NuGetPackageRoot)isexternalinit\1.0.3\contentFiles\cs\net5.0\IsExternalInit\IsExternalInit.cs" Condition="Exists('$(NuGetPackageRoot)isexternalinit\1.0.3\contentFiles\cs\net5.0\IsExternalInit\IsExternalInit.cs')">
      <NuGetPackageId>IsExternalInit</NuGetPackageId>
      <NuGetPackageVersion>1.0.3</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>IsExternalInit\IsExternalInit.cs</Link>
    </Compile>
  </ItemGroup>
  <ItemGroup Condition=" '$(Language)' == 'C#' AND '$(ExcludeRestorePackageImports)' != 'true' ">
    <Compile Include="$(NuGetPackageRoot)bepinex.assemblypublicizer.msbuild\0.4.2\contentFiles\cs\any\IgnoresAccessChecksToAttribute.cs" Condition="Exists('$(NuGetPackageRoot)bepinex.assemblypublicizer.msbuild\0.4.2\contentFiles\cs\any\IgnoresAccessChecksToAttribute.cs')">
      <NuGetPackageId>BepInEx.AssemblyPublicizer.MSBuild</NuGetPackageId>
      <NuGetPackageVersion>0.4.2</NuGetPackageVersion>
      <NuGetItemType>Compile</NuGetItemType>
      <Pack>false</Pack>
      <Private>False</Private>
      <Link>IgnoresAccessChecksToAttribute.cs</Link>
    </Compile>
  </ItemGroup>
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)isexternalinit\1.0.3\build\IsExternalInit.props" Condition="Exists('$(NuGetPackageRoot)isexternalinit\1.0.3\build\IsExternalInit.props')" />
    <Import Project="$(NuGetPackageRoot)nitrox.discovery.msbuild\0.1.0\build\Nitrox.Discovery.MSBuild.props" Condition="Exists('$(NuGetPackageRoot)nitrox.discovery.msbuild\0.1.0\build\Nitrox.Discovery.MSBuild.props')" />
    <Import Project="$(NuGetPackageRoot)bepinex.assemblypublicizer.msbuild\0.4.2\build\BepInEx.AssemblyPublicizer.MSBuild.props" Condition="Exists('$(NuGetPackageRoot)bepinex.assemblypublicizer.msbuild\0.4.2\build\BepInEx.AssemblyPublicizer.MSBuild.props')" />
    <Import Project="$(NuGetPackageRoot)mstest.analyzers\3.8.3\buildTransitive\MSTest.Analyzers.props" Condition="Exists('$(NuGetPackageRoot)mstest.analyzers\3.8.3\buildTransitive\MSTest.Analyzers.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.testing.platform\1.6.3\buildTransitive\net9.0\Microsoft.Testing.Platform.props" Condition="Exists('$(NuGetPackageRoot)microsoft.testing.platform\1.6.3\buildTransitive\net9.0\Microsoft.Testing.Platform.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.testing.platform.msbuild\1.6.3\buildTransitive\Microsoft.Testing.Platform.MSBuild.props" Condition="Exists('$(NuGetPackageRoot)microsoft.testing.platform.msbuild\1.6.3\buildTransitive\Microsoft.Testing.Platform.MSBuild.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.testing.extensions.telemetry\1.6.3\buildTransitive\net9.0\Microsoft.Testing.Extensions.Telemetry.props" Condition="Exists('$(NuGetPackageRoot)microsoft.testing.extensions.telemetry\1.6.3\buildTransitive\net9.0\Microsoft.Testing.Extensions.Telemetry.props')" />
    <Import Project="$(NuGetPackageRoot)mstest.testadapter\3.8.3\buildTransitive\net9.0\MSTest.TestAdapter.props" Condition="Exists('$(NuGetPackageRoot)mstest.testadapter\3.8.3\buildTransitive\net9.0\MSTest.TestAdapter.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.testplatform.testhost\17.13.0\build\netcoreapp3.1\Microsoft.TestPlatform.TestHost.props" Condition="Exists('$(NuGetPackageRoot)microsoft.testplatform.testhost\17.13.0\build\netcoreapp3.1\Microsoft.TestPlatform.TestHost.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.testing.extensions.trxreport\1.6.3\buildTransitive\net9.0\Microsoft.Testing.Extensions.TrxReport.props" Condition="Exists('$(NuGetPackageRoot)microsoft.testing.extensions.trxreport\1.6.3\buildTransitive\net9.0\Microsoft.Testing.Extensions.TrxReport.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.testing.extensions.codecoverage\17.13.1\buildTransitive\net6.0\Microsoft.Testing.Extensions.CodeCoverage.props" Condition="Exists('$(NuGetPackageRoot)microsoft.testing.extensions.codecoverage\17.13.1\buildTransitive\net6.0\Microsoft.Testing.Extensions.CodeCoverage.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.codecoverage\17.13.0\build\netstandard2.0\Microsoft.CodeCoverage.props" Condition="Exists('$(NuGetPackageRoot)microsoft.codecoverage\17.13.0\build\netstandard2.0\Microsoft.CodeCoverage.props')" />
    <Import Project="$(NuGetPackageRoot)microsoft.net.test.sdk\17.13.0\build\netcoreapp3.1\Microsoft.NET.Test.Sdk.props" Condition="Exists('$(NuGetPackageRoot)microsoft.net.test.sdk\17.13.0\build\netcoreapp3.1\Microsoft.NET.Test.Sdk.props')" />
  </ImportGroup>
  <PropertyGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <PkgMSTest_Analyzers Condition=" '$(PkgMSTest_Analyzers)' == '' ">C:\Users\sanya\.nuget\packages\mstest.analyzers\3.8.3</PkgMSTest_Analyzers>
    <PkgFluentAssertions_Analyzers Condition=" '$(PkgFluentAssertions_Analyzers)' == '' ">C:\Users\sanya\.nuget\packages\fluentassertions.analyzers\0.34.1</PkgFluentAssertions_Analyzers>
  </PropertyGroup>
</Project>